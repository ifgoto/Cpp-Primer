** Exercise 1.1
   :PROPERTIES:
   :CUSTOM_ID: exercise-1.1
   :END:

#+BEGIN_QUOTE
  Review the documentation for your compiler and determine what file
  naming convention it uses. Compile and run the main program from page
  2.
#+END_QUOTE

-  [[http://labor-liber.org/en/gnu-linux/development/extensions][GCC and
   File Extensions]]
-  [[https://msdn.microsoft.com/en-us/library/3awe4781.aspx][File Types
   Created for Visual C++ Projects]]

** Exercise 1.2
   :PROPERTIES:
   :CUSTOM_ID: exercise-1.2
   :END:

#+BEGIN_QUOTE
  Exercise 1.2: Change the program to return -1. A return value of -1 is
  often treated as an indicator that the program failed. Recompile and
  rerun your program to see how your system treats a failure indicator
  from main.
#+END_QUOTE

*** Windows
    :PROPERTIES:
    :CUSTOM_ID: windows
    :END:

#+CAPTION: windows
[[https://db.tt/DIJd9eZb]]

*** Linux
    :PROPERTIES:
    :CUSTOM_ID: linux
    :END:

#+CAPTION: linux
[[https://db.tt/lhzXhpCt]]

*255*? why? please look at
[[http://www.tldp.org/LDP/abs/html/exitcodes.html][this]]

** Exercise 1.3
   :PROPERTIES:
   :CUSTOM_ID: exercise-1.3
   :END:

#+BEGIN_QUOTE
  Write a program to print Hello, World on the standard output.
#+END_QUOTE

#+BEGIN_SRC C++
    #include <iostream>

    int main()
    {
        std::cout << "Hello, World" << std::endl;
        return 0;
    }
#+END_SRC

** Exercise 1.4
   :PROPERTIES:
   :CUSTOM_ID: exercise-1.4
   :END:

#+BEGIN_QUOTE
  Our program used the addition operator, +, to add two numbers. Write a
  program that uses the multiplication operator, *, to print the product
  instead.
#+END_QUOTE

#+BEGIN_SRC C++
    #include <iostream>

    int main()
    {
        std::cout << "Enter two numbers:" << std::endl;
        int v1 = 0, v2 = 0;
        std::cin >> v1 >> v2;
        std::cout << "The product is " << v1 * v2 << std::endl;

        return 0;
    }
#+END_SRC

** Exercise 1.5
   :PROPERTIES:
   :CUSTOM_ID: exercise-1.5
   :END:

#+BEGIN_QUOTE
  We wrote the output in one large statement. Rewrite the program to use
  a separate statement to print each operand.
#+END_QUOTE

#+BEGIN_SRC C++
    #include <iostream>

    int main()
    {
        std::cout << "Enter two numbers:" << std::endl;
        int v1 = 0, v2 = 0;
        std::cin >> v1 >> v2;
        std::cout << "The product of ";
        std::cout << v1;
        std::cout << " and ";
        std::cout << v2;
        std::cout << " is ";
        std::cout << v1 * v2;
        std::cout << std::endl;
        return 0;
    }
#+END_SRC

** Exercise 1.6
   :PROPERTIES:
   :CUSTOM_ID: exercise-1.6
   :END:

#+BEGIN_QUOTE
  Explain whether the following program fragment is legal.
#+END_QUOTE

It's illegal.

*[Error] expected primary-expression before '<<' token*

Fixed it: remove the spare semicolons.

#+BEGIN_SRC C++
    std::cout << "The sum of " << v1 << " and " << v2 << " is " << v1 + v2 << std::endl;
#+END_SRC

** Exercise 1.7
   :PROPERTIES:
   :CUSTOM_ID: exercise-1.7
   :END:

#+BEGIN_QUOTE
  Compile a program that has incorrectly nested comments.
#+END_QUOTE

Example:

#+BEGIN_SRC C++
    /*
    * comment pairs /* */ cannot nest.
    * ''cannot nest'' is considered source code,
    * as is the rest of the program
    */
    int main()
    {
        return 0;
    }
#+END_SRC

Compiled result(g++):

#+CAPTION: result
[[https://db.tt/CqQKu8GQ]]

** Exercise 1.8
   :PROPERTIES:
   :CUSTOM_ID: exercise-1.8
   :END:

#+BEGIN_QUOTE
  Indicate which, if any, of the following output statements are legal:
#+END_QUOTE

#+BEGIN_SRC C++
    std::cout << "/*";
    std::cout << "*/";
    std::cout << /* "*/" */;
    std::cout << /* "*/" /* "/*" */;
#+END_SRC

#+BEGIN_QUOTE
  After you've predicted what will happen, test your answers by
  compiling a program with each of these statements. Correct any errors
  you encounter.
#+END_QUOTE

Compiled result(g++):

#+CAPTION: result
[[https://db.tt/mrL9hDCS]]

Corrected? just added a quote:

#+BEGIN_SRC C++
    std::cout << "/*";
    std::cout << "*/";
    std::cout << /* "*/" */";
    std::cout << /* "*/" /* "/*" */;
#+END_SRC

Output:

#+BEGIN_EXAMPLE
    /**/ */ /*
#+END_EXAMPLE

** [[file:ex1_9.cpp][Exercise 1.9]]
   :PROPERTIES:
   :CUSTOM_ID: exercise-1.9
   :END:

** [[file:ex1_10.cpp][Exercise 1.10]]
   :PROPERTIES:
   :CUSTOM_ID: exercise-1.10
   :END:

** [[file:ex1_11.cpp][Exercise 1.11]]
   :PROPERTIES:
   :CUSTOM_ID: exercise-1.11
   :END:

** Exercise 1.12
   :PROPERTIES:
   :CUSTOM_ID: exercise-1.12
   :END:

#+BEGIN_QUOTE
  What does the following for loop do? What is the final value of sum?
#+END_QUOTE

#+BEGIN_SRC C++
    int sum = 0;
    for (int i = -100; i <= 100; ++i)
    sum += i;
#+END_SRC

the loop sums the numbers from -100 to 100. the final value of sum is
zero.

** Exercise 1.13
   :PROPERTIES:
   :CUSTOM_ID: exercise-1.13
   :END:

#+BEGIN_QUOTE
  Rewrite the exercises from ยง 1.4.1 (p. 13) using for loops.
#+END_QUOTE

Ex1.9:

#+BEGIN_SRC C++
    #include <iostream>

    int main()
    {
        int sum = 0;
        for (int i = 50; i <= 100; ++i) sum += i;
        std::cout << "the sum is: " << sum << std::endl;

        return 0;
    }
#+END_SRC

Ex1.10:

#+BEGIN_SRC C++
    #include <iostream>

    int main()
    {
        for (int i = 10; i >= 0; --i)
            std::cout << i << std::endl;
        return 0;
    }
#+END_SRC

Ex1.11:

#+BEGIN_SRC C++
    #include <iostream>

    int main()
    {
        std::cout << "please input two integers:\n";
        int small = 0, big = 0;
        std::cin >> small >> big;

        if (small > big)
        {
            int tmp = small;
            small = big;
            big = tmp;
        }

        for (int i = small; i != big; ++i)
            std::cout << i << std::endl;

        return 0;
    }
#+END_SRC

** Exercise 1.14
   :PROPERTIES:
   :CUSTOM_ID: exercise-1.14
   :END:

#+BEGIN_QUOTE
  Compare and contrast the loops that used a for with those using a
  while. Are there advantages or disadvantages to using either form?
#+END_QUOTE

[[http://stackoverflow.com/questions/2950931/for-vs-while-in-c-programming][A
similar question on Stack Overflow]]

** Exercise 1.15
   :PROPERTIES:
   :CUSTOM_ID: exercise-1.15
   :END:

#+BEGIN_QUOTE
  Write programs that contain the common errors discussed in the box on
  page 16. Familiarize yourself with the messages the compiler
  generates.
#+END_QUOTE

Nothing to present here.

** Exercise 1.16
   :PROPERTIES:
   :CUSTOM_ID: exercise-1.16
   :END:

#+BEGIN_SRC C++
    #include <iostream>
    int main()
    {
        int sum = 0;
        for (int val; std::cin >> val; sum += val);
        std::cout << sum << std::endl;

        return 0;
    }
#+END_SRC

** Exercise 1.17
   :PROPERTIES:
   :CUSTOM_ID: exercise-1.17
   :END:

#+BEGIN_QUOTE
  What happens in the program presented in this section if the input
  values are all equal? What if there are no duplicated values?
#+END_QUOTE

If the input values are all equal, it will print a line which shows the
count of the number you input.

If there are no duplicated values, when different values input, a new
line will be printed if you click =Enter=.

** Exercise 1.18
   :PROPERTIES:
   :CUSTOM_ID: exercise-1.18
   :END:

#+BEGIN_QUOTE
  Compile and run the program from this section giving it only equal
  values as input. Run it again giving it values in which no number is
  repeated.
#+END_QUOTE

#+CAPTION: run
[[https://db.tt/F38zExnq]]

** Exercise 1.19
   :PROPERTIES:
   :CUSTOM_ID: exercise-1.19
   :END:

#+BEGIN_QUOTE
  Revise the program you wrote for the exercises in ยง 1.4.1 (p. 13) that
  printed a range of numbers so that it handles input in which the first
  number is smaller than the second.
#+END_QUOTE

[[https://github.com/pezy/Cpp-Primer/blob/master/ch01/ex1_11.cpp][code]]

** Exercise 1.20
   :PROPERTIES:
   :CUSTOM_ID: exercise-1.20
   :END:

#+BEGIN_QUOTE
  http://www.informit.com/title/032174113 contains a copy of
  Sales\_item.h in the Chapter 1 code directory. Copy that file to your
  working directory. Use it to write a program that reads a set of book
  sales transactions, writing each transaction to the standard output.
#+END_QUOTE

[[file:ex1_20.cpp][Here]] is the code.

Note : C++11 flag need to enable. For GCC and Clang, this can be done
with the =-std=c++11=

** Exercise 1.21
   :PROPERTIES:
   :CUSTOM_ID: exercise-1.21
   :END:

#+BEGIN_QUOTE
  Write a program that reads two Sales\_item objects that have the same
  ISBN and produces their sum.
#+END_QUOTE

The program should check whether the objects have the same ISBN.

[[file:ex1_21.cpp][Code]]

** Exercise 1.22
   :PROPERTIES:
   :CUSTOM_ID: exercise-1.22
   :END:

#+BEGIN_QUOTE
  Write a program that reads several transactions for the same ISBN.
  Write the sum of all the transactions that were read.
#+END_QUOTE

Tips: this program will appear in the section 1.6.

[[file:ex1_22.cpp][Here]] is the code.

#+CAPTION: run
[[https://db.tt/UlkuvpAS]]

** Exercise 1.23
   :PROPERTIES:
   :CUSTOM_ID: exercise-1.23
   :END:

#+BEGIN_QUOTE
  Write a program that reads several transactions and counts how many
  transactions occur for each ISBN.
#+END_QUOTE

Tip: please review the =1.4.4=.

[[file:ex1_23.cpp][Here]] is the code.

** Exercise 1.24
   :PROPERTIES:
   :CUSTOM_ID: exercise-1.24
   :END:

#+BEGIN_QUOTE
  Test the previous program by giving multiple transactions representing
  multiple ISBNs. The records for each ISBN should be grouped together.
#+END_QUOTE

=data/book.txt= may be used as the records.

#+CAPTION: run
[[https://db.tt/EeDI7lvN]]

** Exercise 1.25
   :PROPERTIES:
   :CUSTOM_ID: exercise-1.25
   :END:

#+BEGIN_QUOTE
  Using the Sales\_item.h header from the Web site, compile and execute
  the bookstore program presented in this section.
#+END_QUOTE

It is the same as Exercise 1.22.

#+CAPTION: run
[[https://db.tt/C6OOPuzA]]
